#!/usr/bin/perl -w
#
# Manage snapshots according to a schedule.

use Time::Local;
use Getopt::Long;
use Symbol;
use Fcntl;
use Cwd;

# How old should the lockfile be before we start reporting "another copy is running"
# as an error?
#
# I'm not 100% happy with having a hardwired threshold here. Maybe each snapshot 
# config file could have an estimate of how long its worst time "normal" run should
# be and then $maxlockage could be set to the sum of these (for configs that would
# result in a backup or deletion happening).
# 
# But we'd want a default value, rather than making it mandatory in every
# config, and even deciding that default could be difficult.
# 
# So, for now:
my $maxlockage = 3600;

# Unbuffer stdout for logging.
$| = 1;

# Find the per-filesystem snapshotter module based
# on the script name.
use FindBin;
my $me = $FindBin::Script;

# Get our fs-specific module.
die "Can't parse filesystem variant name out of '$FindBin::Script'\n"
    unless ($me =~ /^([a-z0-9]+)-snapshotter$/);

my $variant = $1;
require "$FindBin::RealBin/Snapshot/$variant.pm";

# Clear out the environment.
%ENV = ();
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:/usr/sbin";
$ENV{'SNAPSHOTTER_backend'} = $variant;

my $test = 0;
GetOptions("test" => \$test);
die "Usage: $me [-test] snapshot.conf [snapshot.conf ...]\n" unless (@ARGV >= 1);
my (@config) = @ARGV;

my $now = time;
my $lockfile = "/var/lock/snapshotter.lock";

my @t = localtime($now);
&info($me, "Starting run");

my $creations = 0;
my $deletions = 0;

# Can pass multiple configs on the command line and it'll
# run through them all. Read and validate all configs first.
my @configs = ();

# Remember where we started from - we need to run
# commands from the directory in which config files
# were located (so relative paths can be used), but
# this means we need to remember where to get back to.
my $cwd = Cwd::getcwd;
$cwd = $1 if ($cwd =~ /^(.*)$/); # Untaint it.

foreach my $configfile (@ARGV)
{
    &info($me, "Reading $configfile");

    # Parse the config.
    my $config = &readconfig($configfile);

    chdir($config->{dirname}) || &error($configfile, "chdir(%s): %s", $config->{dirname}, $!);
    Snapshot::checkconfig($config);

    # If the source doesn't exist, it's an error
    # (unless okmissing is specified, in which case we skip).
    if (!Snapshot::exists($config->{source}))
    {
        next if ($config->{okmissing});

        &error($configfile, "Config source '%s' not found!", $config->{source});
    }

    # Get snapshot lists.
    $config->{snaps} = Snapshot::list($config);

    push(@configs, $config);

    chdir($cwd) || &error($configfile, "chdir(%s): %s", $cwd, $!);
}

# Take a non-blocking lock. If we don't get it then exit.
sysopen(LOCK, $lockfile, Fcntl::O_RDWR|Fcntl::O_CREAT) || &error($me, "Can't open lock file %s: %s", $lockfile, $!);
unless (flock(LOCK, Fcntl::LOCK_EX|Fcntl::LOCK_NB))
{
    my $age = $now - (stat(LOCK))[9];
    if ($age > $maxlockage)
    {
	&error($me, "Another copy has been running for %d second%s", $age, $age == 1 ? "" : "s");
    }
    else
    {
	&info($me, "Another copy has been running for %d second%s", $age, $age == 1 ? "" : "s");
	exit(0);
    }
}

# Handle each config file.
foreach my $config (@configs)
{
    # Do we need to make a snapshot?
    my ($newsnap, $todelete) = &filtersnaplist($config);
    chdir($config->{dirname}) || &error($config->{name}, "chdir(%s): %s", $config->{dirname}, $!);

    if (defined($newsnap) && !$config->{pruneonly})
    {
        my $doit = 1;

	# Put some stuff in the environment for pre- and post-script
	my %oldenv = %ENV;

	while (my ($var, $value) = each(%{$config}))
	{
		if (!ref($value))
		{
			$ENV{"SNAPSHOTTER_config_$var"} = $value;
		}
	}
	$ENV{'SNAPSHOTTER_snapshot'} = $newsnap;

        # If there's a "test" option in the config file, run
        # the specified command and only take the snapshot if
        # that succeeds.
        if (defined($config->{test}))
        {
            my $ret = &logelapsed($config->{name}, "Command", sub {&runcommand($config->{name}, $config->{test})});
            $doit = ($ret == 0) ? 1 : 0;
        }
        if ($doit)
        {
            &info($config->{name}, "Make backup %s", $newsnap);
            $ENV{'SNAPSHOTTER_pre_status'} = &logelapsed($config->{name}, "Command", sub {&runcommand($config->{name}, $config->{pre_snapshot})}) >> 8
		if (defined($config->{pre_snapshot}));

            $creations++;
            if (!$test)
            {
		my $snapstatus = &logelapsed($config->{name}, "Taking snapshot", sub {Snapshot::snapshot($config, $newsnap)});

		# Snapshot::snapshot returns true for OK. Shellscripts tend to
		# expect false, so flip it here.
	        $ENV{'SNAPSHOTTER_snap_status'} = !$snapstatus;

		if ($snapstatus)
                {
                    # Successful snapshot - add it to our list.
                    push(@{$config->{snaps}}, [ $newsnap, $now ]);
                }
                else
                {
                    &warning($config->{name}, "Failed to create snapshot %s", $newsnap);
                }
            }
            &logelapsed($config->{name}, "Command", sub{&runcommand($config->{name}, $config->{post_snapshot})})
                if (defined($config->{post_snapshot}));

	    # Restore original environment.
	    %ENV = %oldenv;
        }
    }

    foreach my $delete (@{$todelete})
    {
        &info($config->{name}, "Delete snapshot %s", $delete);
        $deletions++;
        if (!$test)
        {
            if (!&logelapsed($config->{name}, "Deleting snapshot", sub {Snapshot::delete($config, $delete)}))
            {
                &warning($config->{name}, "Error deleting snapshot %s", $delete);
            }
        }
    }
}

# DO NOT close the lockfile before deleting - this would 
# lead to a race condition (I close, other instance opens
# and locks, then I delete).
unlink($lockfile);
close(LOCK);

&info($me, "Completed %d creation%s and %d deletion%s in %ds ---", 
    $creations, $creations == 1 ? "" : "s",
    $deletions, $deletions == 1 ? "" : "s",
    time-$now);

sub readconfig
{
    my ($file) = @_;
    my $conffd = gensym;

    # Empty hash to fill out.
    my $config = {
        name => $file,
        snapshot => [],
        okmissing => 0,
        pruneonly => 0,
    };

    $file = Cwd::abs_path($file);
    open($conffd, "<$file") || &error($me, "Can't read %s: %s", $file, $!);

    if ($file =~ m#^(.*)/([^/]*)$#)
    {
        $config->{dirname} = $1;
        $config->{basename} = $2;
    }
    else
    {
        &error($me, "Failed to parse '%s' for directory", $file);
    }

    while (<$conffd>)
    {
        s/#.*$//;
        s/^\s*//;
        s/\s*$//;
        next if ($_ eq "");

        # Parse out "tag = values" lines.
        my ($var, $values) = ($1, $2) if (/^(.*?)\s*=\s*(.*)\s*$/);
        &error($file, "Unparseable at line %d.", $.) unless defined($var);

        # Check our tags and do the necessary.
        if ($var eq "source")
        {
            &error($file, "source specified twice at line %d.", $.)
                if (defined($config->{source}));
            $config->{source} = $values;
        }
        elsif ($var eq "dest")
        {
            &error($file, "Dest specified twice at line %d.", $.) if (defined($config->{dest}));
            $config->{dest} = $values;
        }
        elsif ($var eq "test")
        {
            &error($file, "test specified twice at line %d.", $.) if (defined($config->{test}));
            $config->{test} = $values;
        }
        elsif ($var eq "pre-snapshot")
        {
            &error($file, "pre-snapshot specified twice at line %d.", $.) 
                if (defined($config->{pre_snapshot}));
            $config->{pre_snapshot} = $values;
        }
        elsif ($var eq "post-snapshot")
        {
            &error($file, "post-snapshot specified twice at line %d.", $.)
                if (defined($config->{post_snapshot}));
            $config->{post_snapshot} = $values;
        }
        elsif ($var eq "pruneonly")
        {
            &error($file, "pruneonly must be either 'true' or 'false' at line %d.", $.)
                unless ($values =~ /^(true|false)$/);
            $config->{pruneonly} = 1 if ($values eq "true");
        }
        elsif (($var eq "snapshot") || ($var eq "keep"))
        {
            my ($every, $maxage, $bias, $noreplicate) = (undef, undef, 0, 0);
            my $origvalues = $values;
            $every = &decodetime($file, $1) if ($values =~ s/^\s*every\s+(\S+)//);
            $maxage = &decodetime($file, $1) if ($values =~ s/^\s*for\s+(\S+)//);
            $bias = &decodetime($file, $1) if ($values =~ s/^\s*bias\s+(\S+)//);

            &error($file, "snapshot rule incorrectly specified at line %d. (unparsed = '%s').", $., $values)
                unless (defined($every) && defined($maxage) && ($values eq ""));

            &error($file, "snapshot rule at line %d specifies \"every\" greater than \"for\"", $.)
                if ($every > $maxage);

            &error($file, "snapshot rule at %d specifies \"bias\" greater than \"every\"", $.)
                if ($bias > $every);

            push(@{$config->{snapshot}}, {
                spec => $origvalues,
                maxslot => int($maxage/$every),
                bias => $bias,
                res => $every,
            });
        }
        elsif ($var eq "okmissing")
        {
            &error($file, "okmissing must be true or false")
                unless ($values =~ /^(true|false)$/);
            $config->{okmissing} = ($values eq "true");
        }
        else
        {
            &error($file, "Unknown setting at line %d: %s", $., $_);
        }
    }

    &error($file, "Contains no source directory")
        unless (defined($config->{source}));

    &error($file, "Contains no snapshot rules")
        if (@{$config->{snapshot}} == 0);

    # Sort them into increasing resolution order.
    @{$config->{snapshot}} = sort { $a->{res} <=> $b->{res} } @{$config->{snapshot}};

    return $config;
}

# Decode a "friendly" time into seconds.
sub decodetime
{
    my ($file, $period, $line) = @_;
    my %multiply = (
        sec => 1,
        min => 60,
        hour => 3600,
        day => 86400,
        week => 604800,
        year => 31536000
    );

    &error($me, "Invalid period '%s' specified in line %d", $period, $.)
        unless ($period =~ /^(\d+)(sec|min|hour|day|week|year)s?$/);
    return $1*$multiply{$2};
}

sub filtersnaplist
{
    my ($config) = @_;
    
    my @delete = ();
    my %keep = ();
    my $newsnap = undef;

    foreach my $rule (@{$config->{snapshot}})
    {
        my %seen = ();
        my $nowslotstart = $now - (($now - $rule->{bias}) % $rule->{res});

        foreach my $snap (@{$config->{snaps}})
        {
            my ($ent, $stamp) = @{$snap};

            my $stampslotstart = $stamp - (($stamp -$rule->{bias}) % $rule->{res});

            my $slot = int(($nowslotstart-$stampslotstart)/$rule->{res});
            $slot = 0 if ($slot < 0);
            if (!defined($seen{$slot}) && ($slot <= $rule->{maxslot}))
            {
                $keep{$ent} = 1;
                $seen{$slot} = $ent;
            }
        }
        $newsnap = Snapshot::newname($config) unless defined($seen{0});
    }

    # Finally work out what needs deleting after processing all rules.
    my @keep = ();
    foreach my $snap (@{$config->{snaps}})
    {
        if (!defined($keep{$snap->[0]}))
        {
            push(@delete, $snap->[0]);
        }
    }

    return ($newsnap, \@delete);
}

sub runcommand
{
    my ($tag, $cmd) = @_;
    if ($test)
    {
        &info($tag, "Would run '%s'", $cmd);
        return 0;
    }
    else
    {
	&info($tag, "Running '%s'", $cmd);
        system "/bin/bash", "-c", $cmd;
        return $?;
    }
}

# Format a log message.
sub logmsg
{
	my ($tag, $format, @args) = @_;
	my @t = localtime;
	my $output = sprintf("%04d-%02d-%02d %02d:%02d:%02d %s[%d]: $format\n",
		$t[5]+1900, $t[4]+1, $t[3], $t[2], $t[1], $t[0], 
		$tag, $$,
		@args);
	return $output;
}

# Run a coderef and log its elapsed time and return
# value. Assumes return value is an integer.
sub logelapsed
{
	my ($tag, $description, $code) = @_;
	my $start = time;
	my $ret = &{$code};
	my $elapsed = time - $start;
	&info($tag, "%s completed in %d second%s, returned %d", 
		$description, $elapsed, ($elapsed == 1) ? "" : "s", $ret);
	return $ret;
}

# Info message - goes to stdout.
sub info
{
	print &logmsg(@_);
}

# Warning message - goes to stderr and, if not a
# terminal, stdout.
sub warning
{
	my $message = &logmsg(@_);
	print $message unless (-t STDOUT);
	print STDERR $message;
}

# Error message print message to stderr and, if
# not a terminal, stdout. Then exit.
sub error
{
	my $message = &logmsg(@_);
	print $message unless (-t STDOUT);
	print STDERR $message;
	exit 1;
}

__END__

=head1 NAME

snapshotter - Take and retain snapshots according to a schedule.

=head1 SYNOPSYS

  snapshotter [-test] configfile [configfile ...]

=head1 DESCRIPTION

This script will maintain a collection of dated snapshots for a filesystem.
The snapshots will be retained according to a set of rules in a configuration file. 

Each configuration file describes how to manage snapshots of a single
location. Multiple configuration files can be specified on the command line.

If the B<-test> option is supplied then the script will describe what actions it
would take, but won't actually do take them.

The script knows how to handle several "snapshotting" technologies. These are managed 
by their own perl modules in the "Snapshot" directory. The script decides which one 
you're using by looking at its own name. So, for example, to do btrfs snapshotting, 
you would name this script "btrfs-snapshotter" (or, better, symlink to it). I know 
this isn't a brilliant approach, but the script was originally written for btrfs, 
then modified for ZFS and others, and it seemed a good approach at the time!

=head1 CONFIGURATION

The configuration file contains a set of B<tag = value> specifications. Blank lines
are ignored, as is anything after a B<#> on any line.

=head2 Configuration Directives

=over

=item B<source = >location

This specifies which location to manage. Dated snapshots
of this location will be created. This directive is compulsory.

=item B<dest = >location

This optional directive specifies where the snapshots should be 
created. Some snapshotting modules (e.g. zfs) don't use this 
directive because their destination name is dependent on the 
source name.

=item B<test = >command

If B<test> is specified then it is run before a snapshot is 
taken. If the command returns non-zero then the snapshot is not
taken. You could use this to e.g. ping a host to see whether it
is up.

=item B<pre-snapshot = >command

If B<pre-snapshot> is specified it is run before a snapshot is
taken. The snapshot will be taken irrespective of the command's
return code. You could use this to e.g. rsync some data from a 
host before taking the snapshot.

=item B<post-snapshot = >command

If B<post-snapshot> is specified it is run after a snapshot is
taken.

=item B<pruneonly = true|false>

If you specify B<pruneonly = true> then the no new snapshots will 
taken for this location. This is useful for the case where you've 
stopped using the location and just want the retention policy to 
apply to the snapshots that are already present.

=item B<snapshot = every> timeperiod B<for> timeperiod [B<bias> timeperiod]

Specifies how often snapshots should be created and how long they should be kept 
The optional "bias" value specifies whether an offset to the slot start
should be used. This allows daily snapshots, for example, to be specified as
taking place at 3am (using bias 3hours). Multiple B<snapshot> directives
may be specified to construct a complex retention policy. For example:

  snapshot = every 1min for 1hour
  snapshot = every 30mins for 1day
  snapshot = every 1day for 1week
  snapshot = every 1week for 1year
  snapshot = every 26weeks for 10years

=back

=head2 Time periods

Time periods are specified as a number immediately followed by a period
specifier, optionally followed by "s" (for readability). The period specifiers
are: sec, min, hour, day, week, year.

=head1 NOTES

=over

=item You should run B<snapshotter> from cron at least as
frequently as the shortest time period specified in any of its configuration 
files.

=back

=head1 AUTHOR

Alun Jones <auj@aber.ac.uk>

=cut


